#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 117 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 61 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 47 79 79 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 250 128 114
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 184 134 11
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 128 128 0
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 169 169 169
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 128 128 0
224 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 3096 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 173
(
 #"#reader(lib \"htdp-beginner-reader.ss\" \"lang\")((modname hw3) (rea"
 #"d-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor"
 #" repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;;;;;;;;;;;;;;;FROM HOMEWORK 2"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 11"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; A UFO is a (make-UFO (x y))"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; It represents a UFO at some position"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; x and y are NNIs representing the position of the UFO"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"UFO-origin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"UFO-high"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"UFO-random"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 21 3 2 #"71"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"UFO-temp"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 5 #"UFO-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 5 #"UFO-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; An X-Direction is a string enumeration equal to either \"left\" or"
 #" \"right\""
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; It represents the direction something is moving along the x-axis"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"x-direction-left"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"x-direction-right"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"x-direction-temp"
0 0 24 3 1 #" "
0 0 14 3 11 #"x-direction"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 11 #"x-direction"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 11 #"x-direction"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 5 #" ])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; A cow is a (make-cow (x dir))"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #"; It represents a cow at some position, moving in some direction lef"
 #"t or right"
) 0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #"; x is an integer representing the position, and dir is the X-direct"
 #"ion the cow is moving"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"cow-origin"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"cow-far"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"cow-near"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"cow-temp"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 16 #"x-direction-temp"
0 0 24 3 2 #" ("
0 0 14 3 13 #"cow-direction"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 5 #"cow-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 12"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"UFO-DESCENT-SPEED"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; UFO-down : UFO -> UFO"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; Moves a UFO down by some fixed amount"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"UFO-down"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 2 #" ("
0 0 14 3 5 #"UFO-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"UFO-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 2 #") "
0 0 14 3 17 #"UFO-DESCENT-SPEED"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"UFO-down"
0 0 24 3 1 #" "
0 0 14 3 8 #"UFO-high"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"99"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 13"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"UFO-HORIZ-SPEED"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 36 #"; UFO-side : UFO, X-Direction -> UFO"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; Moves a UFO left or right by some fixed amount"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"UFO-side"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"UFO-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 2 #") "
0 0 14 3 15 #"UFO-HORIZ-SPEED"
0 0 24 3 3 #") ("
0 0 14 3 5 #"UFO-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"dir"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"UFO-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 2 #") "
0 0 14 3 15 #"UFO-HORIZ-SPEED"
0 0 24 3 3 #") ("
0 0 14 3 5 #"UFO-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"UFO-side"
0 0 24 3 1 #" "
0 0 14 3 8 #"UFO-high"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"UFO-side"
0 0 24 3 1 #" "
0 0 14 3 10 #"UFO-random"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 2 #"26"
0 0 24 3 1 #" "
0 0 21 3 2 #"71"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 14"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"COW-HORIZ-SPEED"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; cow-side : cow -> cow"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #"; Moves a cow left or right, dependent on its direction, some fixed "
 #"amount"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"cow-side"
0 0 24 3 1 #" "
0 0 14 3 8 #"cow-near"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"cow-side"
0 0 24 3 1 #" "
0 0 14 3 7 #"cow-far"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"cow-side"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cow-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cow-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #") "
0 0 14 3 15 #"COW-HORIZ-SPEED"
0 0 24 3 3 #") ("
0 0 14 3 7 #"cow-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cow-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cow-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #") "
0 0 14 3 15 #"COW-HORIZ-SPEED"
0 0 24 3 3 #") ("
0 0 14 3 7 #"cow-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 15"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"UFO-SCREEN-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; cow-at-edge? : cow -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; Determines if a cow is at the edge of the screen"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cow-at-edge?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cow-at-edge?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cow-at-edge?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 14 3 16 #"UFO-SCREEN-WIDTH"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cow-at-edge?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-cow"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 16 #"UFO-SCREEN-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cow-at-edge?"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cow-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 16 #"UFO-SCREEN-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cow-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 3 #")) "
0 0 14 3 15 #"COW-HORIZ-SPEED"
0 0 24 3 3 #")  "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 16"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; flip-cow : cow -> cow"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; Flips the direction a cow is facing"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flip-cow"
0 0 24 3 1 #" "
0 0 14 3 10 #"cow-origin"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flip-cow"
0 0 24 3 1 #" "
0 0 14 3 7 #"cow-far"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flip-cow"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cow-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cow-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"cow-dir"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cow-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 5 #") ]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 17"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; move-cow : cow -> cow"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #"; Moves a cow in the direction it is facing, UNLESS it is at the edg"
 #"e, in which case"
) 0 0 24 29 1 #"\n"
0 0 17 3 35 #"; it will turn around and then move"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"move-cow"
0 0 24 3 1 #" "
0 0 14 3 10 #"cow-origin"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"move-cow"
0 0 24 3 1 #" "
0 0 14 3 7 #"cow-far"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"move-cow"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"cow-at-edge?"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 3 #") ("
0 0 14 3 8 #"cow-side"
0 0 24 3 2 #" ("
0 0 14 3 8 #"flip-cow"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cow-at-edge?"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"cow-side"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 18"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; ufo-at-cow? UFO, cow -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Determines if a UFO is at the same position as (has captured) a co"
 #"w"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"ufo-at-cow?"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"ufo-at-cow?"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"ufo-at-cow?"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"ufo-at-cow?"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cow-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 3 #") ("
0 0 14 3 5 #"UFO-x"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 5 #"UFO-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 19"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; ufo-crashed? UFO, cow -> bool"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; Determines if a UFO is at the same position as (has captured) a co"
 #"w"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"ufo-crashed?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"ufo-crashed?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"ufo-crashed?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"ufo-crashed?"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 5 #"UFO-y"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"ufo-at-cow?"
0 0 24 3 1 #" "
0 0 14 3 3 #"UFO"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 20"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; game-over? : World -> Game-End-State"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; Determines if the game is over, and if so, whether the UFO won"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-over?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 4 #"))) "
0 0 14 3 18 #"game-end-state-win"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-over?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 4 #"))) "
0 0 14 3 19 #"game-end-state-lose"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-over?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 4 #"))) "
0 0 14 3 20 #"game-end-state-false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 12 #"ufo-crashed?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-UFO"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-cow"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #")) "
0 0 14 3 19 #"game-end-state-lose"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"ufo-at-cow?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-UFO"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-cow"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #")) "
0 0 14 3 18 #"game-end-state-win"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 20 #"game-end-state-false"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; A Game-End-State is a boolean"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; It represents whether the game is over, or the game not being over"
 #" if false"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"game-end-state-win"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"game-end-state-lose"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"game-end-state-false"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"game-end-state-temp"
0 0 24 3 1 #" "
0 0 14 3 14 #"game-end-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 14 #"game-end-state"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 14 #"game-end-state"
0 0 24 3 1 #" "
0 0 14 3 18 #"game-end-state-win"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 14 #"game-end-state"
0 0 24 3 1 #" "
0 0 14 3 19 #"game-end-state-lose"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 4 #" ]))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;;;;;;;;;;;;;;;FROM HOMEWORK 2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Exercise 2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #" ("
0 0 14 3 3 #"UFO"
0 0 24 3 1 #" "
0 0 14 3 3 #"cow"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; A World is a (make-world UFO Cow)"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; A (make-world ufo cow) represents a world with"
0 0 24 29 1 #"\n"
0 0 17 3 25 #"; a cow cow and a ufo ufo"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"world-origin"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 10 #"UFO-origin"
0 0 24 3 1 #" "
0 0 14 3 10 #"cow-origin"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"world-far"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 8 #"UFO-high"
0 0 24 3 1 #" "
0 0 14 3 7 #"cow-far"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"world-random"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-world"
0 0 24 3 1 #" "
0 0 14 3 10 #"UFO-random"
0 0 24 3 1 #" "
0 0 14 3 8 #"cow-near"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-temp"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 8 #"UFO-temp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-UFO"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 8 #"cow-temp"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-cow"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; handle-key : World, KeyEvent -> World"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; Takes in a key and moves the UFO left or right if it is"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; a left or right arrow key, unless it is at the edge"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 12 #"world-origin"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 10 #"cow-origin"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 9 #"world-far"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 14 3 7 #"cow-far"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 12 #"world-origin"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 2 #"-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 10 #"cow-origin"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #" "
0 0 14 3 3 #"evt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"evt"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"UFO-side"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-UFO"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-cow"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 3 #"evt"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"UFO-side"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-UFO"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"world-cow"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; render-world : World -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Takes in a world and produces an image rendering it"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 24 3 1 #" "
0 0 14 3 9 #"world-far"
0 0 24 3 1 #")"
0 6           4 21 1677
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:p"
 #"oint 200 100) #(struct:point 0 100)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 17 96 #(struct:translate 4 2 #(struct:bi"
 #"tmap #(#\"\\377\\376\\376\\376\\377\\377\\377\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\377\\377\\377\\377\\377\\377\\377\\36\\36\\36\\377\\0\\0\\0\\377\\"
 #"0\\0\\0\\377\\24\\24\\24\\377BBB\\3"
 #"77\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377%%%\\3"
 #"77\\377\\377\\377\\377\\377\\377\\377\\377%%%\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\" 8 4) 0 1 1 #hash()))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:point"
 #" 200 100) #(struct:point 0 100)) #(struct:translate 0 -2 #(struct:ov"
 #"erlay #(struct:translate 1 0 #(struct:translate 4 2 #(struct:bitmap "
 #"#(#\"\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\377\\377\\377\\377\\377\\377\\37"
 #"7\\377\\377\\377\\377\\377(\\257M\\377(\\257M\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377~~~\\377(\\257M\\377"
 #"(\\257M\\377~~~\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377~~~\\377~~~\\377"
 #"\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\" 8 4) 0 1 1"
 #" #hash()))) #(struct:translate 0 2 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 200 0 0 0) #(struct:pulled-point 0 0 200 100 0 0) #(struct:pulled-p"
 #"oint 0 0 0 100 0 0)) 255 \"white\")))))))))) #(struct:bb 200 100 100"
 #") #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 24 3 1 #" "
0 0 14 3 12 #"world-origin"
0 0 24 3 1 #")"
0 6           4 21 1678
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:p"
 #"oint 200 100) #(struct:point 0 100)) #(struct:translate -4 0 #(struc"
 #"t:overlay #(struct:translate 0 96 #(struct:translate 4 2 #(struct:bi"
 #"tmap #(#\"\\377\\376\\376\\376\\377\\377\\377\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\377\\377\\377\\377\\377\\377\\377\\36\\36\\36\\377\\0\\0\\0\\377\\"
 #"0\\0\\0\\377\\24\\24\\24\\377BBB\\3"
 #"77\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377%%%\\3"
 #"77\\377\\377\\377\\377\\377\\377\\377\\377%%%\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\" 8 4) 0 1 1 #hash()))) #(struct:translate 4 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:point"
 #" 200 100) #(struct:point 0 100)) #(struct:translate -4 0 #(struct:ov"
 #"erlay #(struct:translate 0 98 #(struct:translate 4 2 #(struct:bitmap"
 #" #(#\"\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377(\\257M\\377(\\257M\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\377\\377\\377~~~\\377(\\257M\\377(\\257M\\377~~~\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377~~~\\377~~~\\37"
 #"7\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\" 8 4) 0 1 "
 #"1 #hash()))) #(struct:translate 4 0 #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 200 0 0 0) #(struct:pulled-point 0 0 200 100 0 0) #(struct:pulled-"
 #"point 0 0 0 100 0 0)) 255 \"white\")))))))))) #(struct:bb 200 100 10"
 #"0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 24 3 1 #" "
0 0 14 3 12 #"world-random"
0 0 24 3 1 #")"
0 6           4 21 1677
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:p"
 #"oint 200 100) #(struct:point 0 100)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 2 96 #(struct:translate 4 2 #(struct:bit"
 #"map #(#\"\\377\\376\\376\\376\\377\\377\\377\\377\\377\\377\\377\\37"
 #"7\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\36\\36\\36\\377\\0\\0\\0\\377\\0\\0\\0\\377\\24\\24\\24\\377BBB\\3"
 #"77\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377%%%\\3"
 #"77\\377\\377\\377\\377\\377\\377\\377\\377%%%\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\" 8 4) 0 1 1 #hash()))) #(struct:translate 0 0 #(s"
 #"truct:crop (#(struct:point 0 0) #(struct:point 200 0) #(struct:point"
 #" 200 100) #(struct:point 0 100)) #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 19 27 #(struct:translate 4 2 #(struct:bitmap"
 #" #(#\"\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377(\\257M\\377(\\257M\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377"
 #"\\377\\377\\377~~~\\377(\\257M\\377(\\257M\\377~~~\\377\\377\\377\\3"
 #"77\\377\\377\\377\\377\\377\\377\\"
 #"377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377~~~\\377~~~\\37"
 #"7\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\" 8 4) 0 1 "
 #"1 #hash()))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 200 0 0 0) #(struct:pulled-point 0 0 200 100 0 0) #(struct:pulled-"
 #"point 0 0 0 100 0 0)) 255 \"white\")))))))))) #(struct:bb 200 100 10"
 #"0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"SCREEN-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"render-world"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 2          13 21 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 112
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\b\0\0\0\4\b"
 #"\6\0\0\0\263\315~\360\0\0\0007IDAT\b\231}\311\261\21\0 \b"
 #"\305\320\37w\240\246b\22\366_\t,\324NM\365\356BU5\240W\3437%"
 #"i\34\270\273\0\00123e\346\32\275\213\210\276y\2\376"
 #"d 4M\200\226l\0\0\0\0IEND\256B`\202"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"cow-x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-cow"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 21 3 2 #"98"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 11 #"place-image"
0 0 24 3 1 #" "
0 2          13 21 1 #"\0"
2 -1.0 -1.0 0.0 0.0 0           1 101
(
 #"\211PNG\r\n\32\n\0\0\0\rIHDR\0\0\0\b\0\0\0\4\b"
 #"\6\0\0\0\263\315~\360\0\0\0,IDAT\b\231c\374\377\377\377\177\6"
 #"<\200\t\231\243\271\301\217As\203\37"
 #"v\5\365\365\365\f\330\330\214\310V\300$\32\e\e\341\n\0"
 #"\0\353\20G\226\342\221\26\0\0\0\0IEND\256B`\202"
) 0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 5 #"UFO-x"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-UFO"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 13 #"SCREEN-HEIGHT"
0 0 24 3 2 #" ("
0 0 14 3 5 #"UFO-y"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-UFO"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 16 #"UFO-SCREEN-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 13 #"SCREEN-HEIGHT"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; world-tick : World -> World"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Runs one tick of the world"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; Moves the Cow sideways and the UFO downwards"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-tick"
0 0 24 3 1 #" "
0 0 14 3 12 #"world-origin"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-tick"
0 0 24 3 1 #" "
0 0 14 3 9 #"world-far"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-UFO"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"99"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-cow"
0 0 24 3 1 #" "
0 0 21 3 2 #"23"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"world-tick"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-world"
0 0 24 3 2 #" ("
0 0 14 3 8 #"UFO-down"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-UFO"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"move-cow"
0 0 24 3 2 #" ("
0 0 14 3 9 #"world-cow"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"edit"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 8 #"big-bang"
0 0 24 3 1 #" "
0 0 14 3 5 #"world"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 12 #"render-world"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 10 #"handle-key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 10 #"game-over?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 10 #"world-tick"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(edit world-far)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(render-world world-far)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Exercise 7"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; A Digit is an Integer from 0 to 9, inclusive"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; A Digit represents a decimal digit."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"Digit-0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"Digit-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"Digit-9"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"digit-temp"
0 0 24 3 1 #" "
0 0 14 3 2 #"dg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 14 3 2 #"dg"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; A Guess is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; \"none\""
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; Digit"
0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #"; It represents the digit guessed or that there is not yet a guess, "
 #"if \"none\""
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"Guess-none"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"none\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"Guess-0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"Guess-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Guess-temp"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #") "
0 0 14 3 7 #"...g..."
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";GG stands for Guessing Game"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"GG-COLOR"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"GG-SIZE"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"GG-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"GG-HEIGHT"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"GG-BACKG"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 14 3 8 #"GG-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 9 #"GG-HEIGHT"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 5 #"guess"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; A GG-gs is a (make-GG-gs Digit Guess String)"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; A (make-GG-gs n guess text) represents the state of the game, wher"
 #"e n"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; is the true number, guess is the user's guess, and text is the tex"
 #"t"
) 0 0 24 29 1 #"\n"
0 0 17 3 29 #"; to be displayed to the user"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"GG-gs-start"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"none\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Guess!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"GG-gs-too-low"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"Nope, higher.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"GG-gs-too-high"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Nope, lower.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"GG-gs-correct"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"You've won!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"GG-gs-temp"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 10 #"Digit-temp"
0 0 24 3 2 #" ("
0 0 14 3 7 #"GG-gs-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 10 #"Guess-temp"
0 0 24 3 2 #" ("
0 0 14 3 11 #"GG-gs-guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 2 #"))"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 10 #"GG-gs-text"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; guess-correct : GG-gs -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #"; Given a GG-gs, returns #t if the guess matches the n and #f otherw"
 #"ise"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"guess-correct?"
0 0 24 3 1 #" "
0 0 14 3 11 #"GG-gs-start"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"guess-correct?"
0 0 24 3 1 #" "
0 0 14 3 13 #"GG-gs-too-low"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"guess-correct?"
0 0 24 3 1 #" "
0 0 14 3 14 #"GG-gs-too-high"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"guess-correct?"
0 0 24 3 1 #" "
0 0 14 3 13 #"GG-gs-correct"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"guess-correct?"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"GG-gs-guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 11 #"GG-gs-guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 3 #") ("
0 0 14 3 7 #"GG-gs-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 11 #"GG-gs-guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 3 #") ("
0 0 14 3 7 #"GG-gs-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 11 #"GG-gs-guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 3 #") ("
0 0 14 3 7 #"GG-gs-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";handle-guess: GG-gs KeyEvent -> GG-gs"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";given a key pressed and a GG-gs, outputs a GG-gs with the"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";proper text to be displayed"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"handle-guess"
0 0 24 3 1 #" "
0 0 14 3 11 #"GG-gs-start"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Nope, lower.\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"handle-guess"
0 0 24 3 1 #" "
0 0 14 3 13 #"GG-gs-too-low"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"Nope, higher.\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"handle-guess"
0 0 24 3 1 #" "
0 0 14 3 14 #"GG-gs-too-high"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Correct!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"handle-guess"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #") ("
0 0 14 3 7 #"GG-gs-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 2 #" ("
0 0 14 3 7 #"GG-gs-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #") "
0 0 19 3 15 #"\"Nope, higher.\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #") ("
0 0 14 3 7 #"GG-gs-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 2 #" ("
0 0 14 3 7 #"GG-gs-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #") "
0 0 19 3 14 #"\"Nope, lower.\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #") ("
0 0 14 3 7 #"GG-gs-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 2 #" ("
0 0 14 3 7 #"GG-gs-n"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 2 #") "
0 0 19 3 10 #"\"Correct!\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";; display : GG-gs -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; render the text in GG-gs as black text on white background"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 11 #"GG-gs-start"
0 0 24 3 3 #") ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Guess!\""
0 0 24 3 1 #" "
0 0 14 3 7 #"GG-SIZE"
0 0 24 3 1 #" "
0 0 14 3 8 #"GG-COLOR"
0 0 24 3 2 #") "
0 0 14 3 8 #"GG-BACKG"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 10 #"GG-gs-text"
0 0 24 3 1 #" "
0 0 14 3 5 #"GG-gs"
0 0 24 3 2 #") "
0 0 14 3 7 #"GG-SIZE"
0 0 24 3 1 #" "
0 0 14 3 8 #"GG-COLOR"
0 0 24 3 2 #") "
0 0 14 3 8 #"GG-BACKG"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";GG-main: void -> GG-gs"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";GG-main runs the main big-bang function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"GG-main"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 8 #"big-bang"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-GG-gs"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"none\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Guess!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 12 #"handle-guess"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 7 #"display"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 14 #"guess-correct?"
0 0 24 3 1 #" "
0 0 14 3 7 #"display"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(GG-main 0)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Exercise 8"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; A Salad is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; - \"lettuce\""
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; - (make-ingredient String Salad)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 10 #"ingredient"
0 0 24 3 2 #" ["
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 4 #"more"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; and represents a collection of ingredients in a salad"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"salad-lettuce"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"lettuce\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"salad-tomato"
0 0 24 3 2 #" ("
0 0 14 3 15 #"make-ingredient"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"tomato\""
0 0 24 3 1 #" "
0 0 14 3 13 #"salad-lettuce"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"salad-fires"
0 0 24 3 2 #" ("
0 0 14 3 15 #"make-ingredient"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"fires\""
0 0 24 3 1 #" "
0 0 14 3 12 #"salad-tomato"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"salad-temp"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"lettuce\""
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 11 #"ingredient?"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 15 #"ingredient-name"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 10 #"salad-temp"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ingredient-more"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Exercise 9"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; describe-salad : Salad -> String"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; Creates a string describing the contents of a given Salad"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"describe-salad"
0 0 24 3 1 #" "
0 0 14 3 13 #"salad-lettuce"
0 0 24 3 2 #") "
0 0 19 3 24 #"\"This salad has lettuce\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"describe-salad"
0 0 24 3 1 #" "
0 0 14 3 12 #"salad-tomato"
0 0 24 3 2 #") "
0 0 19 3 35 #"\"This salad has tomato and lettuce\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"describe-salad"
0 0 24 3 1 #" "
0 0 14 3 11 #"salad-fires"
0 0 24 3 2 #") "
0 0 19 3 45 #"\"This salad has fires and tomato and lettuce\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"describe-salad"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"This salad has \""
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"lettuce\""
0 0 24 3 3 #")) "
0 0 19 3 9 #"\"lettuce\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 11 #"ingredient?"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ingredient-name"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 19 3 7 #"\" and \""
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 15 #"describe-ingred"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ingredient-more"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; describe-salad : Salad -> String"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Creates a string describing the ingredients of a Salad"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"describe-ingred"
0 0 24 3 1 #" "
0 0 14 3 13 #"salad-lettuce"
0 0 24 3 2 #") "
0 0 19 3 9 #"\"lettuce\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"describe-ingred"
0 0 24 3 1 #" "
0 0 14 3 12 #"salad-tomato"
0 0 24 3 2 #") "
0 0 19 3 20 #"\"tomato and lettuce\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"describe-ingred"
0 0 24 3 1 #" "
0 0 14 3 11 #"salad-fires"
0 0 24 3 2 #") "
0 0 19 3 30 #"\"fires and tomato and lettuce\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"describe-ingred"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"string-append"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"lettuce\""
0 0 24 3 3 #")) "
0 0 19 3 9 #"\"lettuce\""
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 11 #"ingredient?"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ingredient-name"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 19 3 7 #"\" and \""
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 15 #"describe-ingred"
0 0 24 3 2 #" ("
0 0 14 3 15 #"ingredient-more"
0 0 24 3 1 #" "
0 0 14 3 5 #"salad"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 10"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; A Building is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; - \"ground\""
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; - (make-story Number PosInt String Building)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"story"
0 0 24 3 2 #" ["
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 14 3 5 #"rooms"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 1 #" "
0 0 14 3 5 #"below"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; and represents either the ground story,"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; or a story with a height, number of rooms, color, and"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";   the rest of the building beneath it"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-0"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"ground\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-1"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-story"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #" "
0 0 14 3 10 #"building-0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-story"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 14 3 10 #"building-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"building-temp"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"story?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 12 #"story-height"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 11 #"story-rooms"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 11 #"story-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 14 3 3 #"..."
0 0 24 3 1 #"("
0 0 14 3 13 #"building-temp"
0 0 24 3 2 #" ("
0 0 14 3 11 #"story-below"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 11"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";count-rooms:b->Natural"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";counts the number of rooms in a given building"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-rooms"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-0"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-rooms"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-1"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-rooms"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-2"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"count-rooms"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"story?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 11 #"story-rooms"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 11 #"count-rooms"
0 0 24 3 2 #" ("
0 0 14 3 11 #"story-below"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Exercise 12"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"BUILDING-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 4 #"1200"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; draw-building : Building, Natural -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; Draws a complete building"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"draw-building"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 6           4 21 4591
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(struct:"
 #"point 1200 100) #(struct:point 0 100)) #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 1200 0) #(struct:point 1200 100) #(struct:point 0 10"
 #"0)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point 24"
 #"0 0) #(struct:point 240 100) #(struct:point 0 100)) #(struct:transla"
 #"te 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(struct:pulled-"
 #"point 0 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) outline"
 #" #(struct:pen \"black\" 2 solid round round))))) #(struct:translate "
 #"0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #(s"
 #"truct:pulled-point 0 0 0 100 0 0)) 255 \"blue\")))) #(struct:transla"
 #"te 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(s"
 #"truct:point 1200 100) #(struct:point 0 100)) #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 240 0 #(struct:overlay #(struct:"
 #"crop (#(struct:point 0 0) #(struct:point 240 0) #(struct:point 240 1"
 #"00) #(struct:point 0 100)) #(struct:translate 0 0 #(struct:translate"
 #" 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:p"
 #"ulled-point 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #("
 #"struct:pulled-point 0 0 0 100 0 0)) outline #(struct:pen \"black\" 2"
 #" solid round round))))) #(struct:translate 0 0 #(struct:polygon (#(s"
 #"truct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0)"
 #" #(struct:pulled-point 0 0 240 100 0 0) #(struct:pulled-point 0 0 0 "
 #"100 0 0)) 255 \"blue\")))) #(struct:translate 0 0 #(struct:crop (#(s"
 #"truct:point 0 0) #(struct:point 1200 0) #(struct:point 1200 100) #(s"
 #"truct:point 0 100)) #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 480 0 #(struct:overlay #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 240 0) #(struct:point 240 100) #(struct:point 0 100)"
 #") #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0"
 #") #(struct:pulled-point 0 0 240 100 0 0) #(struct:pulled-point 0 0 0"
 #" 100 0 0)) outline #(struct:pen \"black\" 2 solid round round))))) #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(struct:pulled-point 0 "
 #"0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) 255 \"blue\")))"
 #") #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct"
 #":point 1200 0) #(struct:point 1200 100) #(struct:point 0 100)) #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 720 0 #(struct"
 #":overlay #(struct:crop (#(struct:point 0 0) #(struct:point 240 0) #("
 #"struct:point 240 100) #(struct:point 0 100)) #(struct:translate 0 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(struct:pulled-point 0"
 #" 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) outline #(stru"
 #"ct:pen \"black\" 2 solid round round))))) #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #(struct:p"
 #"ulled-point 0 0 0 100 0 0)) 255 \"blue\")))) #(struct:translate 0 0 "
 #"#(struct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(struct:p"
 #"oint 1200 100) #(struct:point 0 100)) #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 960 0 #(struct:overlay #(struct:crop (#"
 #"(struct:point 0 0) #(struct:point 240 0) #(struct:point 240 100) #(s"
 #"truct:point 0 100)) #(struct:translate 0 0 #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #(struct:"
 #"pulled-point 0 0 0 100 0 0)) outline #(struct:pen \"black\" 2 solid "
 #"round round))))) #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(stru"
 #"ct:pulled-point 0 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 0"
 #")) 255 \"blue\")))) #(struct:translate 0 0 #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 1200 0 0 0) #(struct:pulled-point 0 0 1200 100 0 0) #(struc"
 #"t:pulled-point 0 0 0 100 0 0)) 255 \"blue\"))))))))))))))))))))))) #"
 #"(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 1200 0 0 0) "
 #"#(struct:pulled-point 0 0 1200 100 0 0) #(struct:pulled-point 0 0 0 "
 #"100 0 0)) 255 \"white\")))))) #(struct:bb 1200 100 100) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"draw-building"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 6           4 21 6553
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(struct:"
 #"point 1200 150) #(struct:point 0 150)) #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0)"
 #" #(struct:point 1200 0) #(struct:point 1200 50) #(struct:point 0 50)"
 #") #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point 600 "
 #"0) #(struct:point 600 50) #(struct:point 0 50)) #(struct:translate 0"
 #" 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-poin"
 #"t 0 0 600 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) outline #(str"
 #"uct:pen \"black\" 2 solid round round))))) #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 600 0 0 0) #(struct:pulled-point 0 0 600 50 0 0) #(struct:p"
 #"ulled-point 0 0 0 50 0 0)) 255 \"red\")))) #(struct:translate 0 0 #("
 #"struct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(struct:poi"
 #"nt 1200 50) #(struct:point 0 50)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 600 0 #(struct:overlay #(struct:crop (#(str"
 #"uct:point 0 0) #(struct:point 600 0) #(struct:point 600 50) #(struct"
 #":point 0 50)) #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 600 0 0 0) #(struct:pulled-point 0 0 600 50 0 0) #(struct:pulled-"
 #"point 0 0 0 50 0 0)) outline #(struct:pen \"black\" 2 solid round ro"
 #"und))))) #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulle"
 #"d-point 0 0 600 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \"r"
 #"ed\")))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 12"
 #"00 0 0 0) #(struct:pulled-point 0 0 1200 50 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 50 0 0)) 255 \"red\"))))))))))) #(struct:translate 0 0 #(st"
 #"ruct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(struct:point"
 #" 1200 150) #(struct:point 0 150)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 0 50 #(struct:crop (#(struct:point 0 0) #(s"
 #"truct:point 1200 0) #(struct:point 1200 100) #(struct:point 0 100)) "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point 240 0)"
 #" #(struct:point 240 100) #(struct:point 0 100)) #(struct:translate 0"
 #" 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(struct:pulled-poin"
 #"t 0 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) outline #(s"
 #"truct:pen \"black\" 2 solid round round))))) #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #(struc"
 #"t:pulled-point 0 0 0 100 0 0)) 255 \"blue\")))) #(struct:translate 0"
 #" 0 #(struct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(struc"
 #"t:point 1200 100) #(struct:point 0 100)) #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:translate 240 0 #(struct:overlay #(struct:crop"
 #" (#(struct:point 0 0) #(struct:point 240 0) #(struct:point 240 100) "
 #"#(struct:point 0 100)) #(struct:translate 0 0 #(struct:translate 0 0"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #(stru"
 #"ct:pulled-point 0 0 0 100 0 0)) outline #(struct:pen \"black\" 2 sol"
 #"id round round))))) #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(s"
 #"truct:pulled-point 0 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 "
 #"0 0)) 255 \"blue\")))) #(struct:translate 0 0 #(struct:crop (#(struc"
 #"t:point 0 0) #(struct:point 1200 0) #(struct:point 1200 100) #(struc"
 #"t:point 0 100)) #(struct:translate 0 0 #(struct:overlay #(struct:tra"
 #"nslate 480 0 #(struct:overlay #(struct:crop (#(struct:point 0 0) #(s"
 #"truct:point 240 0) #(struct:point 240 100) #(struct:point 0 100)) #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #("
 #"struct:pulled-point 0 0 240 100 0 0) #(struct:pulled-point 0 0 0 100"
 #" 0 0)) outline #(struct:pen \"black\" 2 solid round round))))) #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 "
 #"0) #(struct:pulled-point 0 0 240 0 0 0) #(struct:pulled-point 0 0 24"
 #"0 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) 255 \"blue\")))) #("
 #"struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:poi"
 #"nt 1200 0) #(struct:point 1200 100) #(struct:point 0 100)) #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 720 0 #(struct:ove"
 #"rlay #(struct:crop (#(struct:point 0 0) #(struct:point 240 0) #(stru"
 #"ct:point 240 100) #(struct:point 0 100)) #(struct:translate 0 0 #(st"
 #"ruct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 240 0 0 0) #(struct:pulled-point 0 0 2"
 #"40 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) outline #(struct:p"
 #"en \"black\" 2 solid round round))))) #(struct:translate 0 0 #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point "
 #"0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #(struct:pulle"
 #"d-point 0 0 0 100 0 0)) 255 \"blue\")))) #(struct:translate 0 0 #(st"
 #"ruct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(struct:point"
 #" 1200 100) #(struct:point 0 100)) #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 960 0 #(struct:overlay #(struct:crop (#(str"
 #"uct:point 0 0) #(struct:point 240 0) #(struct:point 240 100) #(struc"
 #"t:point 0 100)) #(struct:translate 0 0 #(struct:translate 0 0 #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point"
 #" 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #(struct:pull"
 #"ed-point 0 0 0 100 0 0)) outline #(struct:pen \"black\" 2 solid roun"
 #"d round))))) #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(struct:p"
 #"ulled-point 0 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) 2"
 #"55 \"blue\")))) #(struct:translate 0 0 #(struct:translate 0 0 #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point"
 #" 0 0 1200 0 0 0) #(struct:pulled-point 0 0 1200 100 0 0) #(struct:pu"
 #"lled-point 0 0 0 100 0 0)) 255 \"blue\"))))))))))))))))))))))) #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 1200 0 0 0) #(st"
 #"ruct:pulled-point 0 0 1200 150 0 0) #(struct:pulled-point 0 0 0 150 "
 #"0 0)) 255 \"white\")))))))))) #(struct:bb 1200 150 150) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"draw-building"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 14 #"BUILDING-WIDTH"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"story?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-story"
0 0 24 3 2 #" ("
0 0 14 3 11 #"story-rooms"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 14 #"BUILDING-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 11 #"story-rooms"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"story-height"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 11 #"story-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 14 #"BUILDING-WIDTH"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 12 #"story-height"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 13 #"draw-building"
0 0 24 3 2 #" ("
0 0 14 3 11 #"story-below"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 2 #" ("
0 0 14 3 12 #"story-height"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; draw-story : Natural, Natural, Natural, String, Natural -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; Draws a single story, including separate rooms, from the specified"
 #" values"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-story"
0 0 24 3 2 #" ("
0 0 14 3 11 #"story-rooms"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 14 #"BUILDING-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 11 #"story-rooms"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"story-height"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"story-color"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 6           4 21 4188
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(struct:"
 #"point 1200 100) #(struct:point 0 100)) #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:crop (#("
 #"struct:point 0 0) #(struct:point 240 0) #(struct:point 240 100) #(st"
 #"ruct:point 0 100)) #(struct:translate 0 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #(struct:p"
 #"ulled-point 0 0 0 100 0 0)) outline #(struct:pen \"black\" 2 solid r"
 #"ound round))))) #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(struc"
 #"t:pulled-point 0 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)"
 #") 255 \"blue\")))) #(struct:translate 0 0 #(struct:crop (#(struct:po"
 #"int 0 0) #(struct:point 1200 0) #(struct:point 1200 100) #(struct:po"
 #"int 0 100)) #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 240 0 #(struct:overlay #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 240 0) #(struct:point 240 100) #(struct:point 0 100)) #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(stru"
 #"ct:pulled-point 0 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 0"
 #")) outline #(struct:pen \"black\" 2 solid round round))))) #(struct:"
 #"translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 10"
 #"0 0 0) #(struct:pulled-point 0 0 0 100 0 0)) 255 \"blue\")))) #(stru"
 #"ct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struct:point 1"
 #"200 0) #(struct:point 1200 100) #(struct:point 0 100)) #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:translate 480 0 #(struct:overlay"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 240 0) #(struct:p"
 #"oint 240 100) #(struct:point 0 100)) #(struct:translate 0 0 #(struct"
 #":translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) "
 #"#(struct:pulled-point 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 1"
 #"00 0 0) #(struct:pulled-point 0 0 "
 #"0 100 0 0)) outline #(struct:pen \"black\" 2 solid round round))))) "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(struct:pulled-point 0"
 #" 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) 255 \"blue\"))"
 #")) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) #(struc"
 #"t:point 1200 0) #(struct:point 1200 100) #(struct:point 0 100)) #(st"
 #"ruct:translate 0 0 #(struct:overlay #(struct:translate 720 0 #(struc"
 #"t:overlay #(struct:crop (#(struct:point 0 0) #(struct:point 240 0) #"
 #"(struct:point 240 100) #(struct:point 0 100)) #(struct:translate 0 0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(struct:pulled-point "
 #"0 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 0)) outline #(str"
 #"uct:pen \"black\" 2 solid round round))))) #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #(struct:"
 #"pulled-point 0 0 0 100 0 0)) 255 \"blue\")))) #(struct:translate 0 0"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(struct:"
 #"point 1200 100) #(struct:point 0 100)) #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 960 0 #(struct:overlay #(struct:crop ("
 #"#(struct:point 0 0) #(struct:point 240 0) #(struct:point 240 100) #("
 #"struct:point 0 100)) #(struct:translate 0 0 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 240 0 0 0) #(struct:pulled-point 0 0 240 100 0 0) #(struct"
 #":pulled-point 0 0 0 100 0 0)) outline #(struct:pen \"black\" 2 solid"
 #" round round))))) #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 240 0 0 0) #(str"
 #"uct:pulled-point 0 0 240 100 0 0) #(struct:pulled-point 0 0 0 100 0 "
 #"0)) 255 \"blue\")))) #(struct:translate 0 0 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 1200 0 0 0) #(struct:pulled-point 0 0 1200 100 0 0) #(stru"
 #"ct:pulled-point 0 0 0 100 0 0)) 255 \"blue\")))))))))))))))))))))) #"
 #"(struct:bb 1200 100 100) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-story"
0 0 24 3 2 #" ("
0 0 14 3 11 #"story-rooms"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-2"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 14 #"BUILDING-WIDTH"
0 0 24 3 2 #" ("
0 0 14 3 11 #"story-rooms"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"story-height"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-2"
0 0 24 3 3 #") ("
0 0 14 3 11 #"story-color"
0 0 24 3 1 #" "
0 0 14 3 10 #"building-2"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 6           4 21 1792
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 1200 0) #(struct:"
 #"point 1200 50) #(struct:point 0 50)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:overlay #(struct:crop (#(st"
 #"ruct:point 0 0) #(struct:point 600 0) #(struct:point 600 50) #(struc"
 #"t:point 0 50)) #(struct:translate 0 0 #(struct:translate 0 0 #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point "
 #"0 0 600 0 0 0) #(struct:pulled-point 0 0 600 50 0 0) #(struct:pulled"
 #"-point 0 0 0 50 0 0)) outline #(struct:pen \"black\" 2 solid round r"
 #"ound))))) #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-p"
 #"oint 0 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pull"
 #"ed-point 0 0 600 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \""
 #"red\")))) #(struct:translate 0 0 #(struct:crop (#(struct:point 0 0) "
 #"#(struct:point 1200 0) #(struct:point 1200 50) #(struct:point 0 50))"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:translate 600 0 #("
 #"struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point 600"
 #" 0) #(struct:point 600 50) #(struct:point 0 50)) #(struct:translate "
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 600 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) outline #(st"
 #"ruct:pen \"black\" 2 solid round round))))) #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 600 0 0 0) #(struct:pulled-point 0 0 600 50 0 0) #(struct:"
 #"pulled-point 0 0 0 50 0 0)) 255 \"red\")))) #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 1200 0 0 0) #(struct:pulled-point 0"
 #" 0 1200 50 0 0) #(struct:pulled-point 0 0 0 50 0 0)) 255 \"red\"))))"
 #")))))) #(struct:bb 1200 50 50) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"draw-story"
0 0 24 3 1 #" "
0 0 14 3 11 #"total-rooms"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 1 #" "
0 0 14 3 11 #"rooms-drawn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 11 #"total-rooms"
0 0 24 3 1 #" "
0 0 14 3 11 #"rooms-drawn"
0 0 24 3 3 #") ("
0 0 14 3 11 #"place-image"
0 0 24 3 2 #" ("
0 0 14 3 5 #"frame"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 11 #"rooms-drawn"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"draw-story"
0 0 24 3 1 #" "
0 0 14 3 11 #"total-rooms"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 1 #" "
0 0 14 3 6 #"height"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 11 #"rooms-drawn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 11 #"total-rooms"
0 0 24 3 1 #" "
0 0 14 3 11 #"rooms-drawn"
0 0 24 3 3 #") ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 14 3 14 #"BUILDING-WIDTH"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 6 #"height"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
